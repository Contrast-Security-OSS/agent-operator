name: "Build"
on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "v*"
  workflow_dispatch: {}

jobs:
  #
  # Building Stage
  #
  generate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate-version.outputs.version }}
      is-public-build: ${{ steps.generate-version.outputs.is-public-build }}
    steps:
      - name: Detect Version
        id: generate-version
        run: |
          $ref = '${{ github.ref }}'
          if ($ref.StartsWith('refs/tags/v'))
          {
              $version = ($ref -split '/v' | Select-Object -Last 1)
              $isPublicBuild = $true
          }
          else
          {
              $version = "0.0.1"
              $isPublicBuild = $false
          }
          Write-Host "Detected version: '$version'."
          Write-Host "::set-output name=version::$version"
          Write-Host "::set-output name=is-public-build::$isPublicBuild"
        shell: pwsh
  build-image:
    runs-on: ubuntu-latest
    needs: generate-version
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    env:
      IMAGE_NAME: contrastdotnet.azurecr.io/agent-operator/agent-operator
      BUILD_VERSION: ${{ needs.generate-version.outputs.version }}
      IS_PUBLIC_BUILD: ${{ needs.generate-version.outputs.is-public-build }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
          version: latest
      - uses: docker/login-action@v1
        with:
          registry: contrastdotnet.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=trunk-artifact,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=pr-artifact,enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=release-artifact,enable=${{ needs.generate-version.outputs.version != '0.0.1' }}
      - uses: docker/build-push-action@v2
        id: build
        with:
          file: Dockerfile
          context: .
          push: true
          cache-from: ${{ github.actor != 'dependabot[bot]' && format('type=registry,ref={0}:cache', env.IMAGE_NAME) || ''}}
          cache-to: ${{ github.actor != 'dependabot[bot]' && format('type=registry,ref={0}:cache,mode=max', env.IMAGE_NAME) || ''}}
          build-args: |
            BUILD_VERSION=${{ env.BUILD_VERSION }}
            IS_PUBLIC_BUILD=${{ env.IS_PUBLIC_BUILD }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-manifests:
    runs-on: ubuntu-latest
    needs: generate-version
    env:
      BUILD_VERSION: ${{ needs.generate-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Generate Manifests
        run: |
          set -xe
          cd ./manifests/install/prod
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          ./kustomize edit set image 'contrast/agent-operator:${{ env.BUILD_VERSION }}'
          cat ../../license-header.yaml > ./install-prod.yaml
          ./kustomize build ./ >> ./install-prod.yaml
        shell: bash
      - name: Publish (Artifacts)
        uses: actions/upload-artifact@v3
        with:
          name: manifests
          path: manifests/install/prod/install-prod.yaml
          retention-days: 7
  test-image:
    runs-on: ubuntu-latest
    needs:
      - build-image
    strategy:
      matrix:
        k3s-version:
          - 1.24 # EOL: 2023-09-29
          - 1.23 # EOL: 2023-02-28
          - 1.22 # EOL: 2022-10-28
          - 1.21 # EOL: 2022-06-28
      fail-fast: false
    env:
      IMAGE: contrastdotnet.azurecr.io/agent-operator/agent-operator@${{ needs.build-image.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: docker/login-action@v1
        with:
          registry: contrastdotnet.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - uses: nolar/setup-k3d-k3s@v1
        name: Deploy K3d
        with:
          version: v${{ matrix.k3s-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Import Images
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          command: |
            set -xe

            docker pull ${{ env.IMAGE }}
            docker tag ${{ env.IMAGE }} local/agent-operator:latest
            k3d image import local/agent-operator:latest --mode direct

            docker pull busybox:stable
            k3d image import busybox:stable --mode direct

            docker pull k8s.gcr.io/pause:3.3
            k3d image import k8s.gcr.io/pause:3.3 --mode direct
          shell: bash
      - name: Deploy Manifests
        run: |
          set -xe
          kubectl apply -k manifests/install/testing
          kubectl --namespace testing-agent-operator wait --for=condition=Available --timeout=30s deployment contrast-agent-operator

          kubectl apply -k manifests/examples/testing
        shell: bash
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Execute Functional Tests
        run: |
          set -xe
          dotnet test ./tests/Contrast.K8s.AgentOperator.FunctionalTests/Contrast.K8s.AgentOperator.FunctionalTests.csproj
        shell: bash
      - name: Dump Operator Logs
        if: ${{ always() }}
        run: |
          set -xe
          kubectl --namespace testing-agent-operator get deployment contrast-agent-operator -o yaml
          kubectl --namespace testing-agent-operator logs deployment/contrast-agent-operator
        shell: bash
  test-manifests:
    runs-on: ubuntu-latest
    needs:
      - build-manifests
    strategy:
      matrix:
        k3s-version:
          - 1.24 # EOL: 2023-09-29
          - 1.23 # EOL: 2023-02-28
          - 1.22 # EOL: 2022-10-28
          - 1.21 # EOL: 2022-06-28
      fail-fast: false
    steps:
      - name: Setup Pluto
        uses: FairwindsOps/pluto/github-action@master
      - name: Setup Polaris
        uses: fairwindsops/polaris/.github/actions/setup-polaris@master
        with:
          version: 6.0.0
      - name: Setup Kubeconform
        run: |
          set -xe
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo install kubeconform /usr/local/bin/kubeconform
      - name: Download Manifests
        uses: actions/download-artifact@v3
        id: download-artifacts
        with:
          name: manifests
          path: ./artifacts
      - name: Validate Manifests
        run: |
          set -xe

          which kubeconform
          which pluto
          which polaris

          # https://github.com/yannh/kubeconform/issues/100#issuecomment-1096832969
          kubeconform \
            --verbose \
            --summary \
            --kubernetes-version ${{ matrix.k3s-version }}.0 \
            -schema-location "default" \
            -schema-location "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/{{ .NormalizedKubernetesVersion }}/{{ .ResourceKind }}{{ .KindSuffix }}.json" \
            ./artifacts/install-prod.yaml

          pluto detect \
            --output wide \
            --target-versions k8s=v${{ matrix.k3s-version }}.0 \
            ./artifacts/install-prod.yaml

          polaris audit \
            --audit-path ./artifacts/ \
            --set-exit-code-on-danger \
            --set-exit-code-below-score 90
        shell: bash
  #
  # Release Internal Stage
  #
  release-internal:
    runs-on: ubuntu-latest
    environment: internal
    concurrency:
      group: internal
    needs:
      - generate-version
      - build-image
      - test-image
      - test-manifests
    env:
      BUILD_VERSION: ${{ needs.generate-version.outputs.version }}
      IMAGE_NAME: contrastdotnet.azurecr.io/agent-operator/agent-operator
    if: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v3
      - name: Login (Azure)
        uses: docker/login-action@v1
        with:
          registry: contrastdotnet.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.BUILD_VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.BUILD_VERSION }}
            type=semver,pattern={{major}},value=${{ env.BUILD_VERSION }}
            type=raw,latest
      - name: Tag for Release
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: contrastdotnet.azurecr.io/agent-operator/agent-operator@${{ needs.build-image.outputs.digest }}
          dst: |
            ${{ steps.meta.outputs.tags }}
  #
  # Release Public Stage
  #
  release-public:
    runs-on: ubuntu-latest
    environment: public
    concurrency:
      group: public
      cancel-in-progress: true
    needs:
      - generate-version
      - build-image
      - release-internal
    permissions:
      contents: write
    env:
      BUILD_VERSION: ${{ needs.generate-version.outputs.version }}
      IMAGE_NAME: docker.io/contrast/agent-operator
    if: ${{ needs.generate-version.outputs.version != '0.0.1' }}
    steps:
      - uses: actions/checkout@v3
      - name: Login (Azure)
        uses: docker/login-action@v1
        with:
          registry: contrastdotnet.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - name: Login (Dockerhub)
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.BUILD_VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.BUILD_VERSION }}
            type=semver,pattern={{major}},value=${{ env.BUILD_VERSION }}
            type=raw,latest
      - name: Tag for Release
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: contrastdotnet.azurecr.io/agent-operator/agent-operator@${{ needs.build-image.outputs.digest }}
          dst: |
            ${{ steps.meta.outputs.tags }}
      - uses: actions/download-artifact@v3
        id: download-artifacts
        with:
          name: manifests
          path: ./artifacts
      - name: Publish
        uses: ncipollo/release-action@v1
        with:
          body: |
            Version v${{ env.BUILD_VERSION }} released!
            ```
            contrast/agent-operator:${{ env.BUILD_VERSION }}
            contrast/agent-operator@${{ needs.build-image.outputs.digest }}
            ```
          artifacts: ${{ steps.download-artifacts.outputs.download-path }}/*.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        with:
          environment: production
          ignore_empty: true
          version: agent-operator@${{ env.BUILD_VERSION }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: sentry
          SENTRY_PROJECT: agent-operator
          SENTRY_URL: https://sentry.prod.dotnet.contsec.com
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          message: |-
            Version <https://github.com/Contrast-Security-Inc/agent-operator/releases/tag/v${{ env.BUILD_VERSION }}|v${{ env.BUILD_VERSION }}> of the agent-operator was released!
          fallback: |-
            [GitHub] Version v${{ env.BUILD_VERSION }} of the agent-operator was released!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
